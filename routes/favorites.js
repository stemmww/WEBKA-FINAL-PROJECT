const express = require('express');
const Recipe = require('../models/Recipe');
const authMiddleware = require('../middleware/auth');
const Favorite = require('../models/Favorite');
const router = express.Router();

// üìå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
router.post('/create', authMiddleware, async (req, res) => {
    try {
        const { title, description, ingredients, instructions, cookingTime, category, imageUrl } = req.body;

        const newRecipe = new Recipe({
            name: String,
            
        });

        await newRecipe.save();
        res.status(201).json({ message: '–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', recipe: newRecipe });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞', error: error.message });
    }
});

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã
router.get('/', authMiddleware, (req, res, next) => {
    console.log("‚úÖ JWT Middleware: Token verified for user:", req.user);  // Log user info when accessing this route
    next();
}, async (req, res) => {
    try {
        const favorites = await Favorite.find({ user: req.user.id });
        res.json(favorites);
    } catch (err) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üìå –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω —Ä–µ—Ü–µ–ø—Ç –ø–æ ID
router.get('/:id', async (req, res) => {
    try {
        const recipe = await Recipe.findById(req.params.id).populate('createdBy', 'name');

        if (!recipe) {
            return res.status(404).json({ message: '–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.status(200).json(recipe);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞', error: error.message });
    }
});

// üìå –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç
router.put('/update/:id', authMiddleware, async (req, res) => {
    try {
        const recipe = await Recipe.findById(req.params.id);

        if (!recipe) {
            return res.status(404).json({ message: '–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (recipe.createdBy.toString() !== req.user._id) {
            return res.status(403).json({ message: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç' });
        }

        Object.assign(recipe, req.body);
        await recipe.save();

        res.status(200).json({ message: '–†–µ—Ü–µ–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω', recipe });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞', error: error.message });
    }
});

// üìå –£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç
router.delete('/delete/:id', authMiddleware, async (req, res) => {
    try {
        const recipe = await Recipe.findById(req.params.id);

        if (!recipe) {
            return res.status(404).json({ message: '–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (recipe.createdBy.toString() !== req.user._id) {
            return res.status(403).json({ message: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç' });
        }

        await recipe.deleteOne();
        res.status(200).json({ message: '–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω' });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞', error: error.message });
    }
});

module.exports = router;
